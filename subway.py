# Метрополитен состоит из нескольких линий метро. Все станции метро в городе пронумерованы натуральными числами от 1 до N. 
# На каждой линии расположено несколько станций. Если одна и та же станция расположена сразу на нескольких линиях, то она 
# является станцией пересадки и на этой станции можно пересесть с любой линии, которая через нее проходит, на любую другую (опять же проходящую через нее).

# Напишите программу, которая по данному вам описанию метрополитена определит, с каким минимальным числом пересадок можно
#  добраться со станции A на станцию B. Если данный метрополитен не соединяет все линии в одну систему, то может так получиться, 
# что со станции A на станцию B добраться невозможно, в этом случае ваша программа должна это определить.

# Формат ввода
# Сначала вводится число N — количество станций метро в городе (2≤N≤100). Далее следует число M — количество линий метро (1≤M≤20). 
# Далее идет описание M линий. Описание каждой линии состоит из числа Pi — количество станций на этой линии (2≤Pi≤50) и Pi чисел, 
# задающих номера станций, через которые проходит линия (ни через какую станцию линия не проходит дважды).

# Затем вводятся два различных числа: A — номер начальной станции, и B — номер станции, на которую нам нужно попасть. 
# При этом если через станцию A проходит несколько линий, то мы можем спуститься на любую из них. Так же если через станцию B 
# проходит несколько линий, то нам не важно, по какой линии мы приедем.

# Формат вывода
# Выведите минимальное количество пересадок, которое нам понадобится. Если добраться со станции A на станцию B невозможно, 
# программа должна вывести одно число –1 (минус один).

f = open('input.txt', 'r')
n = int(f.readline())
m = int(f.readline())

# словарь с линиями метро
gf = dict()
for i in range (0, m):
  gf.setdefault(i, set())

for i in range(0, m):
  line = list(map(int, f.readline().strip().split(' ')))
  for j in range(1, line[0]+1):
    gf[i].add(line[j])

print(gf)
lines = dict()
for i in range (0, m):
  lines.setdefault(i, [])


a,b = map(int, f.readline().strip().split(' '))
arrival_lines = set()
depart_lines = set()

# пересечения линия, линия отправления, линия прибытия
for i in range(0, m):
  for j in range(i+1, m):
    if set.intersection(gf[i], gf[j]):
      lines[i].append(j)
      lines[j].append(i)
  if a in gf[i]:
    arrival_lines.add(i)
  if b in gf[i]:
    depart_lines.add(i)



if set.intersection(arrival_lines, depart_lines) != set(): #если линии сразу пересеклись
  print(0)
else:
  visited = set()
  queue = []
  for i in arrival_lines:
    visited.add(i)
    queue.append((i, [i]))
  flag = 0
  while queue:
    tmp, way = queue.pop()
    if tmp in depart_lines: #достигли линии прибытия
      flag = 1
      print(len(way) - 1)
      break
    for i in range(m):
      if i in lines[tmp] and i not in visited: #идем по линиям, на которые можем пересесть, но которые еще не посещали
        visited.add(i)
        queue.insert(0, (i, way + [i]))

  if flag == 0:
    print(-1)
