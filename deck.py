# Научитесь пользоваться стандартной структурой данных deque для целых чисел.  Напишите программу, содержащую описание дека и моделирующую работу дека, реализовав все указанные здесь методы. 
# Программа считывает последовательность команд и в зависимости от команды выполняет ту или иную операцию. После выполнения каждой команды программа должна вывести одну строчку.

# Возможные команды для программы:

# push_front n
# Добавить (положить) в начало дека новый элемент. Программа должна вывести ok.

# push_back n
# Добавить (положить) в конец дека новый элемент. Программа должна вывести ok.

# pop_front
# Извлечь из дека первый элемент. Программа должна вывести его значение.

# pop_back
# Извлечь из дека последний элемент. Программа должна вывести его значение.

# front
# Узнать значение первого элемента (не удаляя его). Программа должна вывести его значение.

# back
# Узнать значение последнего элемента (не удаляя его). Программа должна вывести его значение.

# size
# Вывести количество элементов в деке.

# clear
# Очистить дек (удалить из него все элементы) и вывести ok.

# exit
# Программа должна вывести bye и завершить работу.

# Гарантируется, что количество элементов в деке в любой момент не превосходит 100. Перед исполнением операций pop_front, pop_back, front, back
#  программа должна проверять, содержится ли в деке хотя бы один элемент. Если во входных данных встречается операция pop_front, pop_back, front, back, и при этом дек пуст, 
# то программа должна вместо числового значения вывести строку error.

# Формат ввода
# Вводятся команды управления деком, по одной на строке.

# Формат вывода
# Требуется вывести протокол работы дека, по одному сообщению на строке

f = open('input.txt', 'r')

mas = []
for line in f:
  line = line.strip().split(' ')
  if len(line) == 2:
    if (line[0] == 'push_back'):
      mas.append(int(line[1]))
    else:
      if len(mas) > 0:
        mas.append(mas[-1])
        for i in range(len(mas)-1, 0, -1):  
          mas[i] = mas[i-1]
        mas[0] = int(line[1]) 
      else:
        mas.append(int(line[1]))       
    print('ok')
  elif line[0] == 'pop_front':
    if len(mas) >= 1:
      print(mas[0])
      mas.pop(0)
    else:
      print('error')
  elif line[0] == 'pop_back':
    if len(mas) >= 1:
      print(mas[-1])
      mas.pop()
    else:
      print('error')
  elif line[0] == 'front':
    if len(mas) >= 1:
      print(mas[0])
    else:
      print('error')
  elif line[0] == 'back':
    if len(mas) >= 1:
      print(mas[-1])
    else:
      print('error')
  elif line[0] == 'size':
    print(len(mas))
  elif line[0] == 'clear':
    mas = []
    print('ok')
  else:
    print("bye")
    break