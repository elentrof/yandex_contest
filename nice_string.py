from decimal import BasicContext
# На день рождения маленький Ипполит получил долгожданный подарок — набор дощечек с написанными на них буквами латинского алфавита.
# Теперь-то ему будет чем заняться долгими вечерами, тем более что мама обещала подарить ему в следующем году последовательность целых неотрицательных чисел, если он хорошо освоит этот набор.
# Ради такого богатства Ипполит готов на многое.

# Прямо сейчас юный исследователь полностью поглощён изучением хорошести строк.
# Хорошестью строки называется количество позиций от 1 до L - 1 (где L — длина строки), таких, что следующая буква в строке является следующей по алфавиту.
# Например, хорошесть строки "abcdefghijklmnopqrstuvwxyz" равна 25, а строки "abdc" — только 1.

# Ипполит размышляет над решением закономерно возникающей задачи: чему равна максимально возможная хорошесть строки, которую можно собрать, используя дощечки из данного набора? 
# Вы-то и поможете ему с ней справиться.

# Формат ввода
# Первая строка ввода содержит единственное целое число N — количество различных букв в наборе (1 ≤ N ≤ 26). Обратите внимание: в наборе всегда используются N первых букв латинского алфавита.

# Следующие N строк содержат целые положительные числа ci — количество букв соответствующего типа (1 ≤ ci ≤ 109). Таким образом, первое число означает количество букв "a", второе число задаёт количество букв "b" и так далее.

# Формат вывода
# Выведите единственное целое число — максимально возможную хорошесть строки, которую можно собрать из имеющихся дощечек.

N = int(input())

mas = []
for k in range(N):
  k = int(input())
  mas.append(k)

nice = 0

# aabbbcccc
#можем составить abcabcbc - 2+2+1
# если b встречается 2 раза, а c 3 раза, можем составить 2 пары bc
# и наоборот если b встречается 3 раза, а c 2 раза,  то можем составить 2 пары bc
# таким образом нужно искать минимумы в паре соседних букв 
for i in range(N-1):
  nice += min(mas[i], mas[i+1])

print(nice)