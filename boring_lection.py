# Лёша сидел на лекции. Ему было невероятно скучно. Голос лектора казался таким далеким и незаметным...

# Чтобы окончательно не уснуть, он взял листок и написал на нём свое любимое слово. Чуть ниже он повторил своё любимое слово, без первой буквы.
# Ещё ниже он снова написал своё любимое слово, но в этот раз без двух первых и последней буквы.

# Тут ему пришла в голову мысль — времени до конца лекции все равно ещё очень много, почему бы не продолжить выписывать всеми возможными способами это слово без какой-то части с начала и какой-то части с конца?

# После лекции Лёша рассказал Максу, как замечательно он скоротал время. Максу стало интересно посчитать, сколько букв каждого вида встречается у Лёши в листочке. Но к сожалению, сам листочек куда-то запропастился.

# Макс хорошо знает любимое слово Лёши, а ещё у него не так много свободного времени, как у его друга, так что помогите ему быстро восстановить, сколько раз Лёше пришлось выписать каждую букву.

# Формат ввода
# На вход подаётся строка, состоящая из строчных латинских букв — любимое слово Лёши.

# Длина строки лежит в пределах от 5 до 100 000 символов.

# Формат вывода
# Для каждой буквы на листочке Лёши, выведите её, а затем через двоеточие и пробел сколько раз она встретилась в выписанных Лёшей словах (см. формат вывода в примерах). 
# Буквы должны следовать в алфавитном порядке. Буквы, не встречающиеся на листочке, выводить не нужно.

str = input()

str = str.lower()
len_str = len(str)

# ищем середину строки в зависимости от четности длины строки
is_even = True if len_str % 2 == 0 else False
middle =  int(len_str / 2) if is_even else int(len_str / 2) + 1

koef_mass = [None] * len_str
koef_mass[0] = len_str
koef_mass[-1] = len_str

# массив коэффициетов встречаемости в зависимости от позиции буквы в строке
# массив зеркальный, можно посчитать до середины
# для 4: 4 6 6 4
# для 5: 5 8 9 8 5
# на первом месте длина строки, далее коэф по формуле
for i in range(1, middle):
  koef = koef_mass[i-1] + koef_mass[0] - 2*i
  koef_mass[i] =  koef
  if (is_even or i != middle-1):
    koef_mass[len_str - i - 1] = koef

# буквы могут повторяться, создаем словарь
letters_cnt = {}
for i,l in enumerate(str):
  letters_cnt[l] = letters_cnt.get(l, 0) + koef_mass[i]

sorted_letters = sorted(letters_cnt.items(), key=lambda x: x[0].lower())

for let in sorted_letters:
  print(f'{let[0]}: {let[1]}')